<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backbone.js | 葱丝瓣酱]]></title>
  <link href="http://xiaocong.github.io/blog/categories/backbone-dot-js/atom.xml" rel="self"/>
  <link href="http://xiaocong.github.io/"/>
  <updated>2013-06-24T14:14:59+08:00</updated>
  <id>http://xiaocong.github.io/</id>
  <author>
    <name><![CDATA[Xiaocong He]]></name>
    <email><![CDATA[xiaocong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Requirejs/Backbone/Jasmine前端项目和持续继承]]></title>
    <link href="http://xiaocong.github.io/blog/2012/07/20/integrate-requirejs-slash-backbone-slash-jasmine-front-end-project-with-ci-using-bbb-slash-gruntjs/"/>
    <updated>2012-07-20T11:03:00+08:00</updated>
    <id>http://xiaocong.github.io/blog/2012/07/20/integrate-requirejs-slash-backbone-slash-jasmine-front-end-project-with-ci-using-bbb-slash-gruntjs</id>
    <content type="html"><![CDATA[<p><a href="http://xiaocong.github.com/examples/coffee-bbb-amd-backbone-rest-contacts/dist/release/">Contact</a>(<a href="https://github.com/xiaocong/xiaocong.github.com/tree/master/examples/coffee-bbb-amd-backbone-rest-contacts">源代码</a>)示例项目使用了<a href="https://github.com/backbone-boilerplate/grunt-bbb" title="Backbone Boilerplate framework tool.">bbb</a>作为项目构建工具,
作为<a href="https://github.com/cowboy/grunt" title="task-based command line build tool for JavaScript projects">gruntjs</a>的扩展, <a href="https://github.com/backbone-boilerplate/grunt-bbb" title="Backbone Boilerplate framework tool.">bbb</a>能很方便地完成:</p>

<ul>
<li>Coffeescript的编译</li>
<li>文件的清除和复制</li>
<li>源代码lint</li>
<li>编译LESS</li>
<li>优化requirejs模块</li>
<li>js/css文件的合并和优化</li>
<li>文件的压缩, 打包</li>
<li>内置调试http服务器</li>
</ul>


<p>并且项目中还使用<a href="https://github.com/backbone-boilerplate/grunt-bbb" title="Backbone Boilerplate framework tool.">bbb</a>进行<a href="http://pivotal.github.com/jasmine/">jasmine</a>单元测试代码的编译. 所有的操作都可以通过定义<a href="https://github.com/backbone-boilerplate/grunt-bbb" title="Backbone Boilerplate framework tool.">bbb</a>任务并以命令行方式进行运行, 唯一的一个例外是<a href="http://pivotal.github.com/jasmine/">jasmine</a>测试执行需要启动浏览器执行.
如果要在项目中实施持续集成, 就必须不能依赖浏览器而以命令行方式执行测试.</p>

<p>曾经尝试过<a href="http://www.envjs.com/">envjs</a>, 但在当前的实现中, <a href="http://www.envjs.com/">envjs</a>还不能顺利运行<a href="http://requirejs.org/">requirejs</a>的异步模块加载(<a href="https://github.com/envjs/env-js/issues/7">issue</a>).
<a href="http://phantomjs.org/">Phantomjs</a>是另外一种方案, 它可以很顺利地集成<a href="http://pivotal.github.com/jasmine/">jasmine</a>以及<a href="http://requirejs.org/">requirejs</a>, 但是如果需要集成得很好, 必须得实现一个<a href="http://pivotal.github.com/jasmine/">jasmine</a>的<code>reporter</code>用来和<a href="http://phantomjs.org/">Phantomjs</a>进行通讯,
并且还得实现一个<a href="https://github.com/cowboy/grunt" title="task-based command line build tool for JavaScript projects">gruntjs</a>任务插件, 用来调用<a href="http://phantomjs.org/">Phantomjs</a>执行测试, 以及生成测试报告. 这个工作量不大, 我也曾经完成了一个最简单的<a href="https://github.com/cowboy/grunt" title="task-based command line build tool for JavaScript projects">gruntjs</a>任务来调用<a href="http://phantomjs.org/">Phantomjs</a>. 正在想着怎样进行重构的时候,
突然发现最新的<a href="https://github.com/backbone-boilerplate/grunt-bbb" title="Backbone Boilerplate framework tool.">bbb</a>已经悄然导入了<a href="https://github.com/creynders/grunt-jasmine-task">grunt-jasmine-task</a>, 一个利用<a href="http://phantomjs.org/">Phantomjs</a>执行<a href="http://pivotal.github.com/jasmine/">jasmine</a>测试的<a href="https://github.com/cowboy/grunt" title="task-based command line build tool for JavaScript projects">gruntjs</a>任务插件.</p>

<p>Ok, 那一切就简单了. 现在仅仅需要修改<code>grunt.js</code>配置文件来定义项目的<code>jasmine</code>任务. 当然, 之前必须安装<a href="http://phantomjs.org/">Phantomjs</a>(<a href="https://github.com/cowboy/grunt" title="task-based command line build tool for JavaScript projects">gruntjs</a>网站上有关于如何安装的<a href="https://github.com/cowboy/grunt/blob/master/docs/faq.md#why-does-grunt-complain-that-phantomjs-isnt-installed">faq</a>).
``` javascript
  grunt.initConfig({</p>

<pre><code>// jasmine task is to run specs using phantom, before running it, you must
// make sure you have installed phantom following instruction on
// https://github.com/cowboy/grunt/blob/master/docs/faq.md#why-does-grunt-complain-that-phantomjs-isnt-installed
jasmine: {
  all: {
    src:['http://localhost:8000/tests/SpecRunner.html'],
    timeout: 300000 //in milliseconds
  }
}
</code></pre>

<p>  });</p>

<p><code>
启动`http`服务:
</code> bash
$ ./node_modules/bbb/bin/bbb server
Running &ldquo;server&rdquo; task
Listening on <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a></p>

<p><code>
然后在另一个终端运行`jasmine`任务:
</code> bash
$ ./node_modules/bbb/bin/bbb jasmine
Running &ldquo;jasmine:all&rdquo; (jasmine) task
Running specs for SpecRunner.html
&hellip;&hellip;&hellip;&hellip;.</p>

<blockquote><blockquote><p>31 assertions passed in 13 specs (1451ms)</p></blockquote></blockquote>

<p>Done, without errors.</p>

<p>```</p>

<!--more-->


<p>在CI系统中, 一种可行的做法是使用<code>shell</code>脚本或者<code>Makefile</code>, 先启动<code>http</code>服务, 然后异步执行测试. 这是一个可行的方案, 但是<code>grunt.js</code>本身就是一个命令行工具, 为什么还要用<code>shell</code>或者<code>make</code>了?</p>

<p><code>grunt.js</code>支持<code>alias task</code>, 我们可以这样定义一个任务别名:
<code>javascript
grunt.registerTask('test', 'default server jasmine');
</code>
执行<code>test</code>任务等价于按照顺序执行<code>default</code>, <code>server</code>, <code>jasmine</code>任务. 我们希望这样能工作, 可惜的是, <code>bbb</code>的<code>server</code>任务是阻塞式的, 不会退出,
也就是说, 在它后面的<code>jasmine</code>任务永远不会被执行.</p>

<p>我们希望执行一个<code>server</code>任务, 它能异步启动一个非阻塞的<code>http</code>服务, 后面的任务可以使用这个服务, 并且当<code>grunt</code>进程退出的时候, 该<code>http</code>服务能自动退出.
下面代码是用<code>node</code>的<code>connect</code>实现的满足这个要求的<code>staticserver</code>任务:
``` javascript staticserver.js
/<em>
 * grunt
 * <a href="https://github.com/cowboy/grunt">https://github.com/cowboy/grunt</a>
 *
 * Copyright &copy; 2012 &ldquo;Cowboy&rdquo; Ben Alman
 * Licensed under the MIT license.
 * <a href="http://benalman.com/about/license/">http://benalman.com/about/license/</a>
 </em>/</p>

<p>module.exports = function(grunt) {</p>

<p>  // Nodejs libs.
  var path = require(&lsquo;path&rsquo;);</p>

<p>  // External libs.
  var connect = require(&lsquo;connect&rsquo;);</p>

<p>  // ==========================================================================
  // TASKS
  // ==========================================================================</p>

<p>  grunt.registerTask(&lsquo;staticserver&rsquo;, &lsquo;Start a static web server.&rsquo;, function() {</p>

<pre><code>// Get values from config, or use defaults.
var port = grunt.config('server.port') || 8000;
var base = path.resolve(grunt.config('server.base') || '.');

var middleware = [
  // Serve static files.
  connect.static(base),
  // Make empty directories browsable. (overkill?)
  connect.directory(base)
];

// If --debug was specified, enable logging.
if (grunt.option('debug')) {
  connect.logger.format('grunt', ('[D] server :method :url :status ' +
    ':res[content-length] - :response-time ms').magenta);
  middleware.unshift(connect.logger('grunt'));
}

// Start server.
grunt.log.writeln('Starting static web server on port ' + port + '.');
connect.apply(null, middleware).listen(port);
</code></pre>

<p>  });</p>

<p>};</p>

<p><code>``
假如你看过[gruntjs][]的代码, 你应当能看出来, 这其实就是[gruntjs][]自带的</code>server<code>任务, 只是为了避免和</code>bbb<code>的</code>server<code>任务命名冲突, 这里将任务注册的名称从</code>server<code>换成了</code>staticserver`.</p>

<p>将<code>staticserver.js</code>文件和其他<code>gruntjs</code> <code>task</code>文件一样存放在<code>&lt;工程目录&gt;/tasks</code>目录下, 确保这个任务能正确加载. 然后, 如下注册一个<code>alias task</code>命名为<code>test</code>:
``` javascript
  // Register test task, which will compile app and run the server and then do test.
  // Here we use &lsquo;staticserver&rsquo; task (pure grunt static server) for testing.
  grunt.registerTask(&lsquo;test&rsquo;, &lsquo;default staticserver jasmine&rsquo;);</p>

<p><code>
运行这个`test`任务就能到下面的输出:
</code>
$ ./node_modules/bbb/bin/bbb test
Running &ldquo;clean:0&rdquo; (clean) task
Removing: app
Removing: dist/debug
Removing: dist/release
Removing: tests/js</p>

<p>Running &ldquo;clean:1&rdquo; (clean) task
Removing: app
Removing: dist/debug
Removing: dist/release
Removing: tests/js</p>

<p>Running &ldquo;clean:2&rdquo; (clean) task
Removing: app
Removing: dist/debug
Removing: dist/release
Removing: tests/js</p>

<p>Running &ldquo;clean:3&rdquo; (clean) task
Removing: app
Removing: dist/debug
Removing: dist/release
Removing: tests/js</p>

<p>Running &ldquo;coffee:app&rdquo; (coffee) task</p>

<p>Running &ldquo;lint:beforeconcat&rdquo; (lint) task
Lint free.</p>

<p>Running &ldquo;coffee:spec&rdquo; (coffee) task</p>

<p>Running &ldquo;staticserver&rdquo; task
Starting static web server on port 8000.</p>

<p>Running &ldquo;jasmine:all&rdquo; (jasmine) task
Running specs for SpecRunner.html
&hellip;&hellip;&hellip;&hellip;.</p>

<blockquote><blockquote><p>31 assertions passed in 13 specs (2256ms)</p></blockquote></blockquote>

<p>Done, without errors.</p>

<p>```</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/xiaocong/xiaocong.github.com/tree/master/examples/coffee-bbb-amd-backbone-rest-contacts">示例程序源代码</a></li>
<li><a href="https://github.com/backbone-boilerplate/grunt-bbb" title="Backbone Boilerplate framework tool.">bbb</a></li>
<li><a href="https://github.com/cowboy/grunt" title="task-based command line build tool for JavaScript projects">gruntjs</a></li>
<li><a href="http://phantomjs.org/">Phantomjs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用jasmine+sinon测试backbone+requirejs项目]]></title>
    <link href="http://xiaocong.github.io/blog/2012/07/06/testing-backbone-and-requirejs-with-jasmine/"/>
    <updated>2012-07-06T00:32:00+08:00</updated>
    <id>http://xiaocong.github.io/blog/2012/07/06/testing-backbone-and-requirejs-with-jasmine</id>
    <content type="html"><![CDATA[<p>我们必须为自己的代码写自动测试代码, 并且需要持续地对自己的代码进行回归测试, 因为:</p>

<ul>
<li>项目成员对模块间接口的理解必须一致, 测试代码是最好的文档.</li>
<li>谁都没十足的把握保证自己的修改不影响别人的代码.</li>
<li>没有快速而充分的测试作为保障, 就很难提倡快速重构.</li>
<li>让代码成为资产, 而不是债务, 减少代码的维护成本.</li>
<li>每个人都必须为自己的代码负责.</li>
</ul>


<p>那么基于<a href="http://backbonejs.com/" title="Backbone.js">backbone</a>+<a href="http://requirejs.org/" title="Require.js">requirejs</a>的前端项目应当如何实施测试?</p>

<p>当前已经有很多非常优秀的javascript测试框架, 包括<a href="http://pivotal.github.com/jasmine/">jasmine</a>,
<a href="http://docs.jquery.com/QUnit">QUnit</a>, <a href="http://visionmedia.github.com/mocha/">mocha</a>.
<a href="http://backbonejs.com/" title="Backbone.js">backbone</a>和<a href="http://requirejs.org/" title="Require.js">requirejs</a>的前端项目可以使用上述任何一种测试框架. 技术经理可以根据团队成员的技术背景, 喜好来决定选择哪一种测试框架.</p>

<p>下面就以<a href="/examples/coffee-bbb-amd-backbone-rest-contacts/index.html">Contacts</a>应用为例,
简单demo如何在项目中实现基于<a href="http://pivotal.github.com/jasmine/">jasmine</a>+<a href="http://sinonjs.org/" title="sinon.js">sinon</a>的测试用例.</p>

<ul>
<li><a href="https://github.com/xiaocong/xiaocong.github.com/tree/master/examples/coffee-bbb-amd-backbone-rest-contacts">源码</a></li>
<li><a href="/examples/coffee-bbb-amd-backbone-rest-contacts/tests/SpecRunner.html">测试执行demo</a></li>
</ul>


<h2>工程的目录结构</h2>

<p>``` bash
|-coffee                # web应用coffeescript源代码
|-app                   # coffee编译之后的web应用js文件
|-dist
   |-debug              # concat所有js文件到一个js文件, 但未作minize
   |-release            # concat所有js文件到一个js文件, 并且minize
|-assets                # jquery/requirejs/underscore/backbone等库文件
|-tests
   |-coffee             # 测试程序的coffeescript源代码</p>

<pre><code>  |-config.coffee   # requirejs配置文件
  |-runner.coffee   # 按照requirejs模块定义规范定义的jasmine测试执行模块
</code></pre>

<p>   |-js                 # coffee编译之后的测试程序js文件
   |-lib                # jasmine/sinon等测试用库文件
   |-SpecRunner.html    # 测试html文件, 用来执行broqser端测试代码
|-index.html            # app html文件
|-favicon.ico
|-grunt.js              # grunt任务配置文件
```</p>

<h2>按照<a href="http://requirejs.org/" title="Require.js">requirejs</a>的模块定义方式定义<em>测试模块</em></h2>

<p>由于<em>被测模块</em>是由<a href="http://requirejs.org/" title="Require.js">requirejs</a>进行加载的, 因此, 我们也可以遵循<a href="http://requirejs.org/" title="Require.js">requirejs</a>的模块定义方式定义<em>测试模块</em>, 确保<em>被测模块</em>在<em>测试模块</em>前加载完成:
``` coffeescript model_spec.coffee
define [use!underscore', &lsquo;use!backbone&rsquo;, &lsquo;model/under/test&rsquo;], (_, Backbone, model) &ndash;>
  describe &ldquo;suite description&hellip;&rdquo;, &ndash;></p>

<pre><code>it "spec description...", -&gt;
  # test code here ...
</code></pre>

<p><code>``
下面是测试用例的代码(</code>collection<code>,</code>model<code>,</code>view`各实现了一个模块的测试, 仅供demo):</p>

<ul>
<li><a href="/examples/coffee-bbb-amd-backbone-rest-contacts/tests/coffee/spec/collections/contacts.coffee">Collection测试Dmeo</a></li>
<li><a href="/examples/coffee-bbb-amd-backbone-rest-contacts/tests/coffee/spec/models/contact.coffee">Model测试Demo</a></li>
<li><a href="/examples/coffee-bbb-amd-backbone-rest-contacts/tests/coffee/spec/views/contactitem.coffee">View测试Demo</a></li>
</ul>


<!--more-->


<h2>加载<em>测试模块</em>, 定义测试<code>runner</code></h2>

<p>通过定义模块依赖, 确保在执行<code>runner</code>方法前加载所有的<em>测试模块</em>.</p>

<p>{% include_code SpecRunner lang:coffeescript coffee-bbb-amd-backbone-rest-contacts/tests/coffee/runner.coffee %}</p>

<h2>定义<a href="http://requirejs.org/" title="Require.js">requirejs</a>的配置文件, 执行测试<code>runner</code></h2>

<p>由于我们希望通过一个配置文件同时加载<em>被测模块</em>和<em>测试模块</em>, 因此这里<code>require.config</code>的<code>baseUrl</code>项必须与web应用的该值保持一致.</p>

<p>{% include_code require.config lang:coffeescript coffee-bbb-amd-backbone-rest-contacts/tests/coffee/config.coffee %}</p>

<h2>定义<code>SpecRunner.html</code>, 用来在浏览器端执行策测试代码</h2>

<p>{% include_code SpecRunner.html lang:coffeescript coffee-bbb-amd-backbone-rest-contacts/tests/SpecRunner.html %}</p>

<p>下面是<a href="/examples/coffee-bbb-amd-backbone-rest-contacts/tests/SpecRunner.html">测试执行</a>的结果:</p>

<iframe src="http://xiaocong.github.io/examples/coffee-bbb-amd-backbone-rest-contacts/tests/SpecRunner.html" width="100%" scrolling="no"></iframe>


<h2>遗留问题</h2>

<ul>
<li>由于<em>被测模块</em>的加载是由<a href="http://requirejs.org/" title="Require.js">requirejs</a>完成的, 那么如何在加载时mock<em>被测模块</em>的依赖模块?</li>
<li>如何和CI系统集成, 提供命令行方式的浏览器环境进行测试? 尝试过<a href="http://www.envjs.com/">envjs</a>, 但<a href="http://requirejs.org/" title="Require.js">requirejs</a>总在加载模块时出错, 还没能进一步研究出错细节.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.sync和资源的CRUD]]></title>
    <link href="http://xiaocong.github.io/blog/2012/06/26/backbone-dot-sync-and-crud/"/>
    <updated>2012-06-26T01:33:00+08:00</updated>
    <id>http://xiaocong.github.io/blog/2012/06/26/backbone-dot-sync-and-crud</id>
    <content type="html"><![CDATA[<p>{% blockquote Backbone <a href="http://documentcloud.github.com/backbone/#Sync">http://documentcloud.github.com/backbone/#Sync</a> Backbone.sync %}
Backbone.sync是Backbone用来和服务器进行数据交换的方法. 每当Collection或者Model的数据发生变化, Backbone就会调用Backbone.sync进行数据的CRUD操作, 这个同步方法的缺省实现是使用(jQuery/Zepto).ajax向服务器发送RESTful JSON请求, 并返回一个jqXHR. 你可以通过重载这个方法来定义不同的持续化策略, 例如WebSocket, XML, 或者本地存储.
{% endblockquote %}</p>

<p>Backbone.sync的函数定义是<code>function(method, model, [options])</code>:</p>

<ul>
<li><strong>medhod</strong>: CRUD名称, 可以是<code>create</code>, <code>read</code>, <code>update</code>, <code>delete</code>.</li>
<li><strong>model</strong>: 需要保存的model, 可以是Backbone.Model或者Backbone.Collection.</li>
<li><strong>options</strong>: 所有jQuery请求选项, 包括success和error回掉函数.</li>
</ul>


<p>Backbone.sync方法的缺省实现是通过标准的RESTful风格的CRUD进行数据的操作. CRUD方法对应的REST接口分别是:</p>

<ul>
<li><strong>create</strong> &ndash;> <strong>POST</strong> <code>/collection</code></li>
<li><strong>read</strong> &ndash;> <strong>GET</strong> <code>/collection[/id]</code></li>
<li><strong>update</strong> &ndash;> <strong>PUT</strong> <code>/collection/id</code></li>
<li><strong>create</strong> &ndash;> <strong>DELETE</strong> <code>/collection/id</code></li>
</ul>


<p>你可以通过重载全局的Backbone.sync, 或者Collection/Model的sync方法来改变其缺省实现.</p>

<h2>localStorage方式实现Backbone.sync</h2>

<p>在<a href="http://xiaocong.github.com/examples/coffee-bbb-amd-backbone-contacts/index.html">地址本示例</a>中, 通过重载全局的Backbone.sync方法,
将Collection/Model的CRUD操作转化为localStorage的对象CRUD操作.</p>

<p>下面是Backbone.sync方法的定义(<a href="http://xiaocong.github.com/examples/coffee-bbb-amd-backbone-contacts/coffee/store.coffee">源码</a>),
首先获得传递进来的model对象或其集合对象的localStorage属性对象, 并将CRUD操作转化为localStorage属性对象的数据CRUD操作:
``` coffeescript
  Backbone.sync = (method, model, options) &ndash;></p>

<pre><code>store = model.localStorage or model.collection.localStorage

switch method
  when "read"
    resp = if model.id then store.find(model) else store.findAll()
  when "create"
    resp = store.create(model)
  when "update"
    resp = store.update(model)
  when "delete"
    resp = store.destroy(model)

if resp
  options.success resp
else
  options.error "Record not found"
</code></pre>

<p>```</p>

<!--more-->


<p>localStorage属性对象的类型定义如下, 数据最后是通过HTML本地存储方法<code>localStorage.setItem</code>进行持久化存储:
``` coffeescript
  class Store</p>

<pre><code>constructor: (@name) -&gt;
  store = localStorage.getItem(@name)
  @data = (store and JSON.parse(store)) or {}

save: -&gt;
  localStorage.setItem @name, JSON.stringify(@data)

create: (model) -&gt;
  model.id = model.attributes.id = guid() unless model.id
  @data[model.id] = model
  @save()
  model

update: (model) -&gt;
  @data[model.id] = model
  @save()
  model

find: (model) -&gt;
  @data[model.id]

findAll: -&gt;
  _.values @data

destroy: (model) -&gt;
  delete @data[model.id]
  @save()
  model
</code></pre>

<p><code>``
在定义Collection对象的时候, 需要定义其localStorage属性为上面定义的</code>Store`类型:
{% include_code lang:coffeescript coffee-bbb-amd-backbone-contacts/coffee/collections/contacts.coffee %}</p>

<h2>Backbone.sync标准CRUD REST接口</h2>

<p>如果采用标准的CRUD REST接口进行数据交换, 那就不用重载Backbone.sync方法, 只需要定义Collection的url属性(字符串或者方法)即可.
{% include_code lang:coffeescript coffee-bbb-amd-backbone-rest-contacts/coffee/collections/contacts.coffee %}</p>

<p>其中<code>http://xiaocong.herokuapp.com/contacts/</code>实现了标准的CRUD REST接口:</p>

<ul>
<li><strong>POST</strong> /contacts 生成一个新的地址本记录, 并返回带有新生成的id的地址本数据, 供客户端更新model的id.</li>
<li><strong>GET</strong> /contacts 获取所有地址本数据, 由于Collection对象需要的集合数组在返回的JSON字符串的<code>results</code>属性中, 因此需要通过<code>parse</code>方法转换一下返回的结果.</li>
<li><strong>GET</strong> /contacts/id 获取指定id的地址本数据.</li>
<li><strong>PUT</strong> /contacts/id 更新指定id的地址本数据.</li>
<li><strong>DELETE</strong> /contacts/id 删除指定id的地址本数据</li>
</ul>


<p><a href="/examples/coffee-bbb-amd-backbone-rest-contacts/index.html">使用该CRUD REST接口的演示</a>.</p>

<p>下面是托管在<a href="http://www.heroku.com">heroku</a>上的该REST接口的python源代码:</p>

<ul>
<li>使用<a href="http://bottlepy.org/docs/dev/">bottle</a>微型web框架实现HTTP路由管理</li>
<li>使用<a href="http://www.sqlalchemy.org/">sqlalchemy</a>实现数据库的持续化存储</li>
<li>使用<a href="http://www.gevent.org/">gevent</a>实现HTTP并发服务</li>
<li>通过<code>Access-Control-Allow-Origin</code>实现跨域调用</li>
</ul>


<p>``` python app.py
from gevent import monkey; monkey.patch_all()</p>

<p>from bottle import Bottle, route, get, post, put, delete, request, response, run, static_file, HTTPError
from bottle.ext import sqlalchemy
from sqlalchemy import create_engine, Column, Integer, Sequence, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError</p>

<p>import os</p>

<p>app = Bottle()</p>

<p>@app.route(&ldquo;/&rdquo;)
def hello():</p>

<pre><code>return "APIs for demo!"
</code></pre>

<p>Base = declarative_base()
engine = create_engine(os.environ[&ldquo;SHARED_DATABASE_URL&rdquo;], echo=True)
create_session = sessionmaker(bind=engine)</p>

<p>class Contact(Base):</p>

<pre><code>__tablename__ = "contact"
id = Column(Integer, Sequence('contact_id_seq'), primary_key=True)
name = Column(String(50))
email = Column(String(64))

def __init__(self, name, email):
    self.name = name
    self.email = email

def __repr__(self):
    return "&lt;Contact('%d', '%s', '%s')&gt;" % (self.id, self.name, self.email)
</code></pre>

<p>contactsApp = Bottle()</p>

<p>@contactsApp.hook(&ldquo;after_request&rdquo;)
def crossDomianHook():</p>

<pre><code>response.headers["Access-Control-Allow-Origin"] = "*"
</code></pre>

<p>@contactsApp.route(path=&ldquo;/&rdquo;, method=&ldquo;OPTIONS&rdquo;)
def options1(*args):</p>

<pre><code>return options(*args)
</code></pre>

<p>@contactsApp.route(path=&ldquo;/:id&rdquo;, method=&ldquo;OPTIONS&rdquo;)
def options2(id, *args):</p>

<pre><code>return options(*args)
</code></pre>

<p>def options(*args):</p>

<pre><code>response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE"
if request.headers.get("Access-Control-Request-Headers"):
    response.headers["Access-Control-Allow-Headers"] = request.headers["Access-Control-Request-Headers"]
</code></pre>

<p>@contactsApp.post(&ldquo;/&rdquo;)
def createContact(db):</p>

<pre><code>'''Create contact'''
contact = Contact(name=request.json["name"], email=request.json["email"])
db.add(contact)
db.commit()
return {"id": contact.id, "name": contact.name, "email": contact.email}
</code></pre>

<p>@contactsApp.get(&ldquo;/&rdquo;)
def getAllContacts(db):</p>

<pre><code>'''Retrieve all contacts'''
contacts = db.query(Contact)
return {"results": [{"id":contact.id, "name":contact.name, "email":contact.email} for contact in contacts]}
</code></pre>

<p>@contactsApp.get(&ldquo;/:id&rdquo;)
def getContact(id, db):</p>

<pre><code>'''Retrieve specified contact with id'''
contact = db.query(Contact).filter_by(id=id).first()
if contact:
    return {"id": contact.id, "name": contact.name, "email": contact.email}
raise HTTPError(404, "Contact not found.")
</code></pre>

<p>@contactsApp.put(&ldquo;/:id&rdquo;)
def updateContact(id, db):</p>

<pre><code>'''Update contact'''
session = create_session()
try:
    session.query(Contact).filter_by(id=id).update({"name": request.json["name"], "email": request.json["email"]})
    session.commit()
except SQLAlchemyError, e:
    session.rollback()
    raise HTTPError(500, "Database Error", e)
finally:
    session.close()
</code></pre>

<p>@contactsApp.delete(&ldquo;/:id&rdquo;)
def deleteContact(id, db):</p>

<pre><code>'''Delete contact'''
session = create_session()
try:
    contact = session.query(Contact).filter_by(id=id).first()
    session.delete(contact)
    session.commit()
except SQLAlchemyError, e:
    session.rollback()
    raise HTTPError(500, "Database Error", e)
finally:
    session.close()
</code></pre>

<p>sqlalchemyplugin = sqlalchemy.Plugin(engine, Base.metadata, create=True)
contactsApp.install(sqlalchemyplugin)
app.mount(&ldquo;/contacts&rdquo;, contactsApp)</p>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>port = int(os.environ.get("PORT", 5000))
run(app=app, server="gevent", host="0.0.0.0", port=port, reloader=True)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在AMD项目中使用grunt/bbb进行构建和发布]]></title>
    <link href="http://xiaocong.github.io/blog/2012/05/30/use-bbb-slash-grunt-dot-js-to-build-slash-deploy-amd-project/"/>
    <updated>2012-05-30T12:25:00+08:00</updated>
    <id>http://xiaocong.github.io/blog/2012/05/30/use-bbb-slash-grunt-dot-js-to-build-slash-deploy-amd-project</id>
    <content type="html"><![CDATA[<h2>AMD项目的构建和发布</h2>

<p>在 Javascript 前端项目中, 为了提高页面的响应速度, 通常需要对 js/css 文件进行:</p>

<ul>
<li>concat, 将多个 js 或者 css 文件合成一个文件, 这样能减少浏览器给服务器发送请求的此次数, 减少在网络通讯握手上花费的时间;</li>
<li>minify, 去除 js 或者 css 文件中多余的字符, 例如注释, 换行, 空格等, 并将变量的可读的长名称改为不可读的短名称, 缩短 js 和 css 文件的长度, 减少网络传输的时间;</li>
</ul>


<p>目前已经有很多进行 Javascript 构建和发布管理的工具, 包括<a href="https://github.com/mde/jake">Jake</a>, <a href="https://github.com/cowboy/grunt">Grunt</a>, <a href="https://code.google.com/p/js-build-tools">js-build-tools</a> (ant tasks collection).
<a href="http://requirejs.org/">RequireJS</a>也已经提供了一个很好的优化 js 文件的工具<a href="http://requirejs.org/docs/optimization.html">r.js</a>, 可以将多个 AMD 模块合并成一个文件.
这里主要介绍 Grunt 的一个 plugin 集合: <a href="https://github.com/backbone-boilerplate/grunt-bbb">Grunt-bbb</a></p>

<h2><a href="https://github.com/backbone-boilerplate/grunt-bbb">Grunt-bbb</a></h2>

<p>bbb 主要包含下面这些 tasks:</p>

<ul>
<li><code>init</code>
初始化一个空的项目模板.</li>
<li><code>lint</code>
确保所有的 js 文件符合 JSHint.</li>
<li><code>less</code>
编译 LESS 生成 css 文件.</li>
<li><code>mincss</code>
Minify 所有的 css 文件,并合并成一个 css 文件.</li>
<li><code>min</code>
grunt 内置 task, Minify js 文件.</li>
<li><code>concat</code>
合并多个文件到一个文件.</li>
<li><code>requirejs</code>
利用<code>r.js</code>合并<a href="http://requirejs.org/">RequireJS</a>模块到一个 js 文件.</li>
<li><code>server</code>
静态文件的 HTTP 服务, 用于开发调试.</li>
</ul>


<h3>安装</h3>

<p><code>bash
$ npm install -g bbb
</code></p>

<h3>新项目初始化</h3>

<p>进入空的项目目录,然后运行:</p>

<p><code>bash
$ bbb init
</code></p>

<p>根据命令行的提示输入相应的内容, 然后会生成一个空的 <code>grunt.js</code> 文件.</p>

<h3>目录结构</h3>

<p>bbb 要求按照如下目录结构组织源代码:</p>

<p><code>
|-app
   |-项目 js 文件
|-dist
   |-build生成的发布文件
|-assets
   |-require.js
   |-backbone.js
   |-underscore.js 等需要的 js 库文件
|-index.html
|-favicon.ico
</code></p>

<p>css 和 img 文件缺省目录在 <code>assets/</code> 目录中. 我们可以更改 <code>grunt.js</code> 来增加/更改/删除任务(task), 以及更改任务的设置,
包括缺省目录.</p>

<!--more-->


<h2>在<a href="https://github.com/xiaocong/xiaocong.github.com/tree/source/source/examples/amd-backbone-contacts/">AMD Backbone Contacts</a>中增加<code>bbb</code>构建配置</h2>

<p><a href="/examples/amd-backbone-contacts/index.html">demo</a> 项目中没有对 js 文件进行任何优化, 下面就逐步修
改该项目来引入<code>bbb</code>进行项目构建和发布.</p>

<ul>
<li>修改项目目录结构, 来适应<code>bbb</code>的要求.</li>
</ul>


<p>主要的改动在于将<code>backbone</code>, <code>require</code>, <code>underscore</code>等库文件从<code>js/libs/</code>移动到<code>assets/js/</code>目录, 将
<code>js/</code>目录更名为<code>app/</code>, 将<code>templates/</code>和<code>css/</code>目录移动到<code>assets/</code>.</p>

<ul>
<li>增加<code>grunt.js</code>配置文件.</li>
</ul>


<p>可以用<code>bbb init</code>命令来生成缺省的<code>grunt.js</code>配置文件, <em>必须</em>包含下面的代码:
``` javascript
module.exports = function(grunt) {
  grunt.initConfig({</p>

<pre><code>//config options...
</code></pre>

<p>  });
};
<code>
- 在`grunt.js`配置选项中定义文件路径.
</code> javascript
  grunt.initConfig({</p>

<pre><code>//...
dirs: {
  debug: "dist/debug", // debug files under the folder
  release: "dist/release" // release files under the folder
},
//...
</code></pre>

<p>  });
<code>
- 在 `grunt.js` 配置选项中定义文件清理任务 `clean`.
</code> javascript
  grunt.initConfig({</p>

<pre><code>//...
clean: ["&lt;config:dirs.debug&gt;", "&lt;config:dirs.release&gt;"],
//...
</code></pre>

<p>  });
<code>
- 在`grunt.js`配置选项中定义 `lint` 任务, 确保所有在 `app/` 目录下的 `js` 文件都符合 `JSHint`.
</code> javascript
  grunt.initConfig({</p>

<pre><code>//...
lint: {
  beforeconcat: [
    "app/**/*.js"
  ],
  afterconcat: [
    "dist/debug/assets/js/require/require.js"
  ]
},
jshint: {
  options: {
    scripturl: true
  }
},
//...
</code></pre>

<p>  });
<code>``
*注:</code>lint:afterconcat<code>任务运行会报jQuery代码的错, 没有仔细调查原因, 因此在</code>concat<code>完成后没有调用</code>lint:afterconcat`任务.*</p>

<ul>
<li>在<code>grunt.js</code>配置选项中定义 <code>requirejs</code> 任务, 合并所有项目所需要的 js 文件到一个 <code>require.js</code> 文件(真正的
<code>assets/js/require/require.js</code>文件不会包含在这个输出文件中, 后面会用<code>concat</code>任务将真正的<code>require.js</code>合并进来).
<code>javascript
grunt.initConfig({
  //...
  requirejs: {
    // Include the main configuration file
    mainConfigFile: "app/config.js",
    // Output file
    out: "dist/debug/assets/js/require/require.js",
    // Root application module
    name: "config",
    // Do not wrap everything in an IIFE
    wrap: false
  }
  //...
});
</code></li>
<li>在<code>grunt.js</code>配置选项中定义<code>concat</code>任务, 将<code>require.js</code>库文件合并到<code>requirejs</code>任务的输出文件中去.
<code>javascript
grunt.initConfig({
  //...
  concat: {
    "dist/debug/assets/js/require/require.js": [
      "assets/js/require/require.js",
      "dist/debug/assets/js/require/require.js"
    ]
  },
  //...
});
</code></li>
<li>在<code>grunt.js</code>配置选项中定义<code>min</code>任务, Minify <code>concat</code>任务生成的文件到<code>dist/release/assets/js/require/require.js</code>.
<code>javascript
grunt.initConfig({
  //...
  min: {
    "dist/release/assets/js/require/require.js": [
      "dist/debug/assets/js/require/require.js"
    ]
  },
  //...
});
</code></li>
<li>在<code>grunt.js</code>配置选项中定义<code>mincss</code>任务, Minify所有的<code>css</code>文件到<code>dist/release/assets/css/index.css</code>.
<code>javascript
grunt.initConfig({
  //...
  mincss: {
    "dist/release/assets/css/index.css": [
      "assets/css/application.css"
    ]
  },
});
</code></li>
<li>在<code>grunt.js</code>配置选项中定义<code>copy</code>任务, 复制相应的文件到<code>dist/debug/</code>或者<code>dist/release/</code>目录.
<code>javascript
grunt.initConfig({
  //...
  copy: {
    debug: {
      src: ["assets/css/**/*.css", "favicon.ico"],
      renames: {"index.noconfig.html": "index.html"},
      dest: "&lt;config:dirs.debug&gt;"
    },
    release: {
      src: ["favicon.ico"],
      renames: {"index.noconfig.html": "index.html"},
      dest: "&lt;config:dirs.release&gt;"
    }
  },
  //...
});
</code>
<code>bbb</code>和<code>grunt</code>没有内置文件复制任务, 因此我们需要自己实现这个任务. 这里直接采用
<a href="https://github.com/jquery/jquery-ui/blob/master/grunt.js#L392">jquery-ui</a>的实现.
{% include_code copy lang:javascript bbb-amd-backbone-contacts/tasks/copy.js %}
<code>grunt.js</code>配置文件中需要加载该任务:
<code>javascript
grunt.loadTasks("tasks");  //加载所有在'tasks/'目录下的`task`.
</code></li>
<li><p>在<code>grunt.js</code>配置选项中定义<code>server</code>任务, 用于开发调试.
<code>javascript
grunt.initConfig({
  //...
  server: {
    port: 8000,
    base: ".",
    folders: {
      "app": "app",
      "assets": "assets"
    },
    debug: {
      folders: {
        "app": "dist/debug",
        "assets": "dist/debug/assets",
        "": "dist/debug"
      }
    },
    release: {
      folders: {
        "app": "dist/release",
        "assets": "dist/release/assets",
        "": "dist/release"
      }
    }
  },
  //...
});
</code>
这里定义了3个任务:</p></li>
<li><p><strong><code>server</code></strong>: 侦听并返回<code>.</code>目录下的文件, 这个服务不对 js 和 css 文件作任何 Minify 和 concat.</p></li>
<li><strong><code>server:debug</code></strong>: 侦听并返回<code>dist/debug/</code>目录下的文件.</li>
<li><p><strong><code>server:release</code></strong>: 侦听并返回<code>dist/release/</code>目录下的文件.</p></li>
<li><p>将上诉任务进行串接, 定义复合任务.
<code>javascript
grunt.registerTask("default", "clean lint:beforeconcat");
grunt.registerTask("debug", "default copy:debug requirejs concat");
grunt.registerTask("release", "debug copy:release mincss min");
</code></p></li>
<li><strong><code>default</code></strong>: 清除<code>dist/</code>目录, <code>lint</code> <code>app/</code>目录下的所有 js 文件.</li>
<li><strong><code>debug</code></strong>: 调用<code>default</code>任务, 复制相关文件到<code>dist/debug/</code>目录下, 合并 js(AMD模块) 文件, 最后合并<code>require.js</code>库文件.</li>
<li><strong><code>release</code></strong>: 调用<code>debug</code>任务, 复制相关文件到<code>dist/release/</code>目录下, Minify css 文件, Minify js 文件.</li>
</ul>


<p>至此, 所有的任务都已经定义完成. 下面是完整的<code>grunt.js</code>文件.
{% include_code gruntfile lang:javascript bbb-amd-backbone-contacts/grunt.js %}</p>

<h2>运行</h2>

<ul>
<li><p>运行 HTTP 服务器于<a href="{{%20root_url%20}}/examples/bbb-amd-backbone-contacts/index.html">开发版本</a>:
<code>javascript
$ bbb server
</code></p></li>
<li><p>发布文件到<code>dist/debug/</code>目录, 并运行 HTTP 服务器于 <a href="{{%20root_url%20}}/examples/bbb-amd-backbone-contacts/dist/debug/index.html">debug 版本</a>:
<code>javascript
$ bbb debug
$ bbb server:debug
</code></p></li>
<li><p>发布文件到<code>dist/release/</code>目录, 并运行 HTTP 服务器于 <a href="{{%20root_url%20}}/examples/bbb-amd-backbone-contacts/dist/release/index.html">release 版本</a>:
<code>javascript
$ bbb release
$ bbb server:release
</code></p></li>
</ul>


<p>这里可以查看所有的<strong><a href="https://github.com/xiaocong/xiaocong.github.com/tree/source/source/examples/bbb-amd-backbone-contacts/">源代码</a></strong>.</p>

<h2>参考</h2>

<ol>
<li><a href="http://requirejs.org/">RequireJS官方网站</a></li>
<li><a href="https://github.com/cowboy/grunt">Grunt.js</a></li>
<li><a href="https://github.com/backbone-boilerplate/grunt-bbb">bbb</a></li>
<li><a href="https://github.com/cowboy/grunt/blob/master/docs/api.md">Grunt API</a></li>
<li><a href="https://github.com/jquery/jquery-ui/blob/master/grunt.js">jQuery-ui自定义grunt任务</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配合AMD/RequireJS使用Backbone.js]]></title>
    <link href="http://xiaocong.github.io/blog/2012/05/16/use-amd-and-backbone-together/"/>
    <updated>2012-05-16T14:23:00+08:00</updated>
    <id>http://xiaocong.github.io/blog/2012/05/16/use-amd-and-backbone-together</id>
    <content type="html"><![CDATA[<h2>为什么使用AMD/RequireJS?</h2>

<p>还记得C语言是怎么解决引用冲突的么?
``` c</p>

<h1>ifndef <em>MY_MODULE_H</em></h1>

<h1>define <em>MY_MODULE_H</em></h1>

<p>/<em>my code here</em>/</p>

<h1>endif  /<em><em>MY_MODULE_H</em></em>/</h1>

<p>```</p>

<p>Backbone解决的是将用户数据，页面显示，以及流程控制模块化，而AMD解决的是将不同功能的代码封装到小的代码单元，代码单元功能的注册，以及代码依赖。</p>

<p>{% blockquote requirejs <a href="http://requirejs.org/docs/whyamd.html#purposes">http://requirejs.org/docs/whyamd.html#purposes</a> Why AMD? %}
What are JavaScript modules? What is their purpose?
&ndash; Definition: how to encapsulate a piece of code into a useful unit, and how to register its capability/export a value for the module.
&ndash; Dependency References: how to refer to other units of code.
{% endblockquote %}</p>

<h2>如何使用AMD/RequireJS?</h2>

<p>下面javascript代码定义了一个新的模块<code>module1</code>，其依赖<code>jquery</code>模块：</p>

<p>``` javascript module1.js
define(&lsquo;module1&rsquo;, [&lsquo;jquery&rsquo;] , function ($) {</p>

<pre><code>return function () {};
</code></pre>

<p>});
```</p>

<p><code>define</code>函数接受三个参数：</p>

<ul>
<li>第一个参数是个字符串，定义了本模块的名称，其他模块可以用这个名称来引用本模块曝露出来的对象；可以省略该参数，缺省以文件名来命名该模块；</li>
<li>第二个参数是个数组，定义了本模块需要引用的其他模块的列表，例如<code>jquery</code>或者其他用户自定义模块；</li>
<li>第三个参数是个函数，该函数的参数列表分别对应第二个参数里的模块列表曝露的对象；该函数的返回值即为本模块曝露的对象；</li>
</ul>


<p><a href="http://requirejs.org/" title="Require.js">官网</a>可以查到详细的说明和用例。</p>

<!--more-->


<h2>如何配合使用<a href="http://backbonejs.com/" title="Backbone.js">Backbone</a>和<a href="http://requirejs.org/" title="Require.js">RequireJS</a>?</h2>

<p>正式的Backbone和Underscore版本已经不再缺省支持AMD，不过我们有好几种方法可以在AMD中使用Backbone和Underscore。<a href="http://twitter.com/tbranyen">Tim Branyen</a>在他的博文 <a href="http://tbranyen.com/post/amdrequirejs-shim-plugin-for-loading-incompatible-javascript">AMD/RequireJS Shim Plugin for Loading Incompatible JavaScript</a> 中详细阐述了解决办法。下面的例子程序也是采用了Branyen推荐的方法。</p>

<h2>使用AMD/RequireJS重写Contacts例子程序</h2>

<ul>
<li>没有使用AMD/RequireJS的<a href="https://github.com/xiaocong/xiaocong.github.com/tree/source/source/examples/backbone-contacts/">源代码</a>和<a href="/examples/backbone-contacts/index.html">例子</a>；</li>
<li>使用AMD/RequireJS改写后的<a href="https://github.com/xiaocong/xiaocong.github.com/tree/source/source/examples/amd-backbone-contacts/">源代码</a>和<a href="/examples/amd-backbone-contacts/index.html">例子</a>。</li>
</ul>


<p>这里主要用到了AMD/RequireJS的以下模块插件：</p>

<ul>
<li><code>use</code>插件，用来引用<code>backbone</code>和<code>underscore</code>等非AMD兼容的javascript库。</li>
<li><code>text</code>插件，用来异步加载模板文本文件。</li>
</ul>


<p>下面是所有模块代码：</p>

<h3>Model: Contact</h3>

<p>{% include_code Contact lang:javascript amd-backbone-contacts/js/models/contact.js %}</p>

<ul>
<li><em>这里<code>Contact</code>模块返回的是<code>Contact</code>定义，而不是一个实例，引用该对象的其他模块必须通过<code>new</code>生成实例对象。</em></li>
</ul>


<h3>Collection: Contacts</h3>

<p>{% include_code Contacts lang:javascript amd-backbone-contacts/js/collections/contacts.js %}</p>

<ul>
<li><em>与<code>Contact</code>返回定义不同的是，因为该网页应用只需要一个全局<code>Contacts</code>实例对象，因此这里可以返回<code>new</code>生成的<code>Contacts</code>实例对象。</em></li>
<li><em>通过<code>models/contact</code>来引用<code>Contact</code>定义。</em></li>
</ul>


<h3>View: ContactItem</h3>

<p>{% include_code ContactItemView lang:javascript amd-backbone-contacts/js/views/contactitem.js %}</p>

<ul>
<li><em>返回<code>ContactItemView</code>定义。</em></li>
<li><em>使用了<code>templates/item.html</code>模板进行页面渲染。</em></li>
</ul>


<h4>item template</h4>

<p>{% include_code Contact Item View Template amd-backbone-contacts/templates/item.html %}</p>

<h3>View: Sidebar</h3>

<p>{% include_code SidebarView lang:javascript amd-backbone-contacts/js/views/contactitem.js %}</p>

<ul>
<li><em>返回<code>SidebarView</code>全局实例对象。</em></li>
<li><em>引用了<code>Contacts</code>全局实例对象，以及<code>Contact</code>和<code>ContactItemView</code>定义。</em></li>
<li><em>使用了<code>templates/sidebar.html</code>模板进行页面渲染。</em></li>
</ul>


<h4>sidebar template</h4>

<p>{% include_code Sidebar View Template amd-backbone-contacts/templates/sidebar.html %}</p>

<h3>View: Edit, Show 和 Main</h3>

<h4><code>ShowView</code>用于显示选中<code>Contact</code>的详细内容：</h4>

<p>{% include_code ShowView lang:javascript amd-backbone-contacts/js/views/show.js %}</p>

<ul>
<li><em>返回<code>ShowView</code>全局实例对象。</em></li>
<li><em>使用了<code>templates/show.html</code>模板进行页面渲染。</em></li>
</ul>


<h5>show template</h5>

<p>{% include_code Show View Template amd-backbone-contacts/templates/show.html %}</p>

<h4><code>EditView</code>用于编辑选中<code>Contact</code>的详细内容：</h4>

<p>{% include_code EditView lang:javascript amd-backbone-contacts/js/views/edit.js %}</p>

<ul>
<li><em>返回<code>EditView</code>全局实例对象。</em></li>
<li><em>使用了<code>templates/edit.html</code>模板进行页面渲染。</em></li>
</ul>


<h5>edit template</h5>

<p>{% include_code Edit View Template amd-backbone-contacts/templates/edit.html %}</p>

<h4><code>MainView</code>是<code>ShowView</code>和<code>EditView</code>的容器：</h4>

<p>{% include_code EditView lang:javascript amd-backbone-contacts/js/views/main.js %}</p>

<ul>
<li><em>返回<code>MainView</code>全局实例对象，其功能就是根据用户的操作，显示<code>ShowView</code>或者<code>EditView</code>。</em></li>
</ul>


<h3>View: App</h3>

<p>{% include_code AppView lang:javascript amd-backbone-contacts/js/views/app.js %}</p>

<ul>
<li><em>返回全局<code>AppView</code>全局实例对象，包含有<code>SidebarView</code>和<code>MainView</code>。</em></li>
</ul>


<h3>namespace</h3>

<p>全局实例对象，用于存放所有的全局定义和实例对象，同时扩展了<code>Backbone.Events</code>的功能，可以提供模块间的pub/sub服务。</p>

<p>{% include_code AppView lang:javascript amd-backbone-contacts/js/namespace.js %}</p>

<h3>store</h3>

<p>{% include_code AppView lang:javascript amd-backbone-contacts/js/store.js %}</p>

<ul>
<li><em>返回本地存储<code>Store</code>定义。</em></li>
</ul>


<h3>router</h3>

<p>{% include_code AppView lang:javascript amd-backbone-contacts/js/router.js %}</p>

<ul>
<li><em>返回全局<code>AppRouter</code>实例对象，提供客户端的页面内路由，并将页面内路由绑定到对应的事件响应函数。</em></li>
</ul>


<h3>app</h3>

<p>{% include_code AppView lang:javascript amd-backbone-contacts/js/app.js %}</p>

<ul>
<li><em>返回全局初始化函数，供初始化javascript脚本调用。</em></li>
</ul>


<h3>main</h3>

<p>{% include_code AppView lang:javascript amd-backbone-contacts/js/main.js %}</p>

<ul>
<li><em>这里用到了<code>require</code>，而不是模块定义所用的<code>define</code>。</em></li>
<li><em>异步加载<code>App</code>实例对象，并运行<code>App</code>对象的初始化函数，开始整个应用程序的执行。</em></li>
</ul>


<h3>config</h3>

<p>{% include_code AppView lang:javascript amd-backbone-contacts/js/config.js %}</p>

<ul>
<li><em>AMD配置文件，定义了用到的javascript库及其对应路径，包含<code>Backbone</code>的插件库。</em></li>
<li><em><code>deps</code>定义了需要用<code>main.js</code>来初始化应用。</em></li>
</ul>


<h3>index.html</h3>

<p>在<code>index.html</code>中只需要一个javascript加载语句：
{% include_code AppView lang:javascript amd-backbone-contacts/index.html %}</p>

<h2>关于AMD/RequireJS的一些思考</h2>

<p>AMD/RequireJS是按照模块之间的依赖关系进行异步加载。程序开发人员根据需求来定义依赖的模块，以及本模块的实现，而不用过多操心依赖的模块是否已经加载，加载执行顺序由AMD/RequireJS来保证。</p>

<p>在正常的依赖关系下，如<code>A</code>依赖于<code>B</code>，<code>B</code>依赖于<code>C</code>，那么模块执行的先后顺序是<code>C</code>&ndash;><code>B</code>&ndash;><code>A</code>。但是记住一点，这里讲的是模块初始化过程中的加载执行顺序，并不涉及到用户操作过程中的模块依赖关系。上诉例子中，可能出现<code>C</code>的用户事件响应函数需要访问<code>A</code>的数据，但是只要这个用户事件响应不是在模块初始化过程中发生的，我们就不能认为<code>C</code>依赖于<code>A</code>。模块初始化过程中的加载执行顺序肯定是不能出现循环依赖，否则就是死循环。</p>

<p>为了解决上诉例子中<code>C</code>的用户事件响应函数需要访问<code>A</code>的数据的问题，我们可以引人一个全局对象模块<code>namespace</code>。当模块<code>A</code>完成初始化之后，将自身对象注册到这个<code>namespace</code>中；<code>namespace</code>是一个被动对象，其在初始化过程中不依赖任何其他对象，而所有其他模块都可以依赖于<code>namespace</code>；当初始化完成后，<code>C</code>可以通过<code>namespace</code>访问到<code>A</code>。</p>

<p>在地址本例子中，<code>namespace</code>就是一个全局对象模块；因为模块依赖定义中，<code>AppRouter</code>依赖于<code>AppView</code>，而<code>AppView</code>的依赖模块<code>EditView</code>，<code>ShowView</code>和<code>SidebarView</code>需要能访问<code>AppRouter</code>对象；通过<code>namespace</code>全局对象模块，任何模块都可以运行时访问<code>AppRouter</code>对象。当然，我们也可以通过<code>namespace</code>，使得初始化过程中<code>AppRouter</code>和<code>AppView</code>没有依赖关系。</p>

<p><em>在浏览器中这个<code>namespace</code>可以是<code>window</code>对象或其子对象。</em></p>
]]></content>
  </entry>
  
</feed>
